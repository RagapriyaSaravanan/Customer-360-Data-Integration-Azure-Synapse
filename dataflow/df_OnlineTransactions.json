{
	"name": "df_OnlineTransactions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "OnlineTransactions"
				},
				{
					"linkedService": {
						"referenceName": "ls_AzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "Customers"
				},
				{
					"linkedService": {
						"referenceName": "ls_AzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "Products"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_AzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "OnlineTransactionsDBSink"
				},
				{
					"linkedService": {
						"referenceName": "ls_AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "OnlineTransactionsNullSink"
				}
			],
			"transformations": [
				{
					"name": "AddsrctoColumns"
				},
				{
					"name": "LookupCustomers"
				},
				{
					"name": "LookupProducts"
				},
				{
					"name": "filterNulls"
				},
				{
					"name": "split1"
				},
				{
					"name": "RemoveDuplicates"
				},
				{
					"name": "alterRow"
				},
				{
					"name": "Renamethecolumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          OrderID as integer,",
				"          CustomerID as integer,",
				"          ProductID as integer,",
				"          DateTime as timestamp,",
				"          PaymentMethod as string,",
				"          Amount as decimal(10,0),",
				"          Status as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'project3',",
				"     folderPath: 'bronze',",
				"     fileName: 'OnlineTransactions.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> OnlineTransactions",
				"source(output(",
				"          CustomerID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT CustomerID FROM dbo.Customers',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> Customers",
				"source(output(",
				"          ProductID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT ProductID FROM dbo.Products',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> Products",
				"OnlineTransactions select(mapColumn(",
				"          each(match(1==1),",
				"               concat('src_',$$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddsrctoColumns",
				"RemoveDuplicates, Customers lookup(src_CustomerID == CustomerID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCustomers",
				"LookupCustomers, Products lookup(src_ProductID == ProductID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupProducts",
				"AddsrctoColumns filter(!isNull(src_OrderID) && !isNull(src_CustomerID) && !isNull(src_ProductID) && !isNull(src_DateTime) && !isNull(src_PaymentMethod) && !isNull(src_Amount) && !isNull(src_Status)) ~> filterNulls",
				"LookupProducts split(!isNull(CustomerID) && !isNull(ProductID),",
				"     disjoint: false) ~> split1@(isExists, NotExists)",
				"filterNulls aggregate(groupBy(src_OrderID),",
				"     each(match(name!='src_OrderID'), $$ = first($$))) ~> RemoveDuplicates",
				"split1@isExists alterRow(upsertIf(1==1)) ~> alterRow",
				"split1@NotExists select(mapColumn(",
				"          OrderID = src_OrderID,",
				"          CustomerID = src_CustomerID,",
				"          ProductID = src_ProductID,",
				"          DateTime = src_DateTime,",
				"          PaymentMethod = src_PaymentMethod,",
				"          Amount = src_Amount,",
				"          Status = src_Status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Renamethecolumns",
				"alterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          OrderID as integer,",
				"          CustomerID as integer,",
				"          ProductID as integer,",
				"          DateTime as timestamp,",
				"          PaymentMethod as string,",
				"          Amount as decimal(10,2),",
				"          Status as string",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'OnlineTransactions',",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: true,",
				"     keys:['OrderID'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          OrderID = src_OrderID,",
				"          CustomerID = src_CustomerID,",
				"          ProductID = src_ProductID,",
				"          DateTime = src_DateTime,",
				"          PaymentMethod = src_PaymentMethod,",
				"          Amount = src_Amount,",
				"          Status = src_Status",
				"     )) ~> OnlineTransactionsDBSink",
				"Renamethecolumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'project3',",
				"     folderPath: 'silver-uncleaned/onlineTransactions',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> OnlineTransactionsNullSink"
			]
		}
	}
}